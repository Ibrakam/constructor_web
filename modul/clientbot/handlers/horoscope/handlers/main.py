from contextlib import suppress

from aiogram import Bot, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.utils.i18n import lazy_gettext as __
import pendulum
from clientbot.handlers.horoscope.functs.statistic import add_statistic

from clientbot.handlers.horoscope.keyboards.reply import main_horoscope_menu, zodiac_signs_builder
from clientbot.handlers.horoscope.functs.parser import HoroscopeParser
from clientbot.handlers.horoscope.functs.gen_image import make_horoscope_image
from clientbot.handlers.horoscope.data.states import PeriodForm
from loader import client_bot_router

hparser = HoroscopeParser()


@client_bot_router.message(text="‚ôàÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø")
@client_bot_router.message(state=PeriodForm.day, text=__("–í–µ—Ä–Ω—É—Ç—å—Å—è"))
@client_bot_router.message(state=PeriodForm.month, text=__("–í–µ—Ä–Ω—É—Ç—å—Å—è"))
@client_bot_router.message(state=PeriodForm.tomorrow, text=__("–í–µ—Ä–Ω—É—Ç—å—Å—è"))
async def horoscope(message: Message | CallbackQuery, state: FSMContext) -> None:
    await message.answer(_("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!").format(full_name=message.from_user.full_name),
                         reply_markup=await main_horoscope_menu())


@client_bot_router.message(
    F.text.in_([__("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"), __("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü"), __("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞")])
)
@client_bot_router.callback_query(F.data == "look_horoscope")
async def horoscope(message: Message | CallbackQuery, state: FSMContext) -> None:
    period = _("–¥–µ–Ω—å")
    msg_text = _("–¥–µ–Ω—å") if isinstance(message, CallbackQuery) else message.text
    pattern = {
        "photo": "https://i.imgur.com/th5YkKr.jpg",
        "caption": _("<b>üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {period}:</b>").format(period=period),
        "reply_markup": zodiac_signs_builder()
    }

    if msg_text.endswith(_("–º–µ—Å—è—Ü")):
        await state.set_state(PeriodForm.month)
        period = _("–º–µ—Å—è—Ü")
    elif msg_text.endswith(_("–∑–∞–≤—Ç—Ä–∞")):
        await state.set_state(PeriodForm.tomorrow)
        period = _("–∑–∞–≤—Ç—Ä–∞")
    else:
        await state.set_state(PeriodForm.day)

    if isinstance(message, CallbackQuery):
        return await message.message.answer_photo(**pattern)
    await message.answer_photo(**pattern)


@client_bot_router.message(
    F.text.in_([
        _("‚ôà –û–≤–µ–Ω"), _("‚ôâ –¢–µ–ª–µ—Ü"), _("‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã"), _("‚ôã –†–∞–∫"),
        _("‚ôå –õ–µ–≤"), _("‚ôç –î–µ–≤–∞"), _("‚ôé –í–µ—Å—ã"), _("‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω"),
        _("‚ôê –°—Ç—Ä–µ–ª–µ—Ü"), _("‚ôë –ö–æ–∑–µ—Ä–æ–≥"), _("‚ôí –í–æ–¥–æ–ª–µ–π"), _("‚ôì –†—ã–±—ã")
    ]),
    flags={"dont_clear": "dont_clear_state"})
async def horoscope_show(message: Message, state: FSMContext, bot: Bot) -> None:
    await message.answer(_("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≥–æ—Ä–æ—Å–∫–æ–ø"))
    current_state = await state.get_state()
    if current_state not in [PeriodForm.day.state, PeriodForm.month.state, PeriodForm.tomorrow.state]:
        return
    cs_name = current_state.split(":")[1]

    if cs_name == "month":
        hr = await hparser.get_horoscope(message.text[2:], period="month")
        current_date = _("{message} –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü").format(message=message.text)
    elif cs_name == "day":
        hr = await hparser.get_horoscope(message.text[2:])
        current_date = _("{message} –Ω–∞ {pendu}").format(message=message.text, pendu=pendulum.now().to_date_string())
    elif cs_name == "tomorrow":
        hr = await hparser.get_horoscope(message.text[2:], period="tomorrow")
        current_date = _("{message} –Ω–∞ {pendu}").format(message=message.text,
                                                        pendu=pendulum.tomorrow().to_date_string())

    horoscope_text = hr["text"].split("\n")
    numbers = ""

    with suppress(IndexError):
        numbers = (
            _("ü§ë –ë–∏–∑–Ω–µ—Å: {hr1} "
              "üíñ –õ—é–±–æ–≤—å: {hr2} "
              "üçÄ –¶–∏—Ñ—Ä–∞ –¥–Ω—è: {hr3}").format(hr1=hr['numbers'][0], hr2=hr['numbers'][1], hr3=hr['numbers'][2])
        )

    await bot.send_chat_action(message.chat.id, "typing")
    await message.answer_photo(
        photo=
        BufferedInputFile(
            await make_horoscope_image(
                horoscope_text[0] if len(horoscope_text[0]) < 450 else horoscope_text[1],
                cs_name
            ),
            f"{message.from_user.id}"
        ),
        caption=
        f"{current_date}\n\n"
        f"üîÆ {horoscope_text[0]}\n\n"
        f"üîÆ {horoscope_text[1]}\n\n"
        f"{numbers}",
        parse_mode="Markdown"
    )
    me = await bot.get_me()
    await add_statistic(me.username)
