from aiogram import Bot, flags
# from aiogram.dispatcher.filters import CommandObject
from aiogram.types import Message
from modul.clientbot.handlers.chatgpt.callback_data import AssistantAICallbackdata
from clientbot.handlers.chatgpt.keyboards.inline_kbrds import menu_btn, under_menu_btn
from clientbot.handlers.chatgpt.keyboards.reply_kbrds import back_btn, get_chatgt_main_kbrd
from clientbot.handlers.chatgpt.states import AssistantAIChatStates
from clientbot.shortcuts import get_user
from loader import client_bot_router
from config import settings
from aiogram.dispatcher.fsm.context import FSMContext
from aiogram.utils.i18n import gettext as _
from aiogram.types import CallbackQuery, ReplyKeyboardRemove
from utils.cp import CalculatePrice
from utils.more_func import json_loader
from utils.assistants_ai import Assistants_AI

assistant = Assistants_AI(settings.AI_ASSISTANT_KEY)    
    
@client_bot_router.message(text='ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
@flags.rate_limit(key="on_start")
async def on_start(message: Message, state: FSMContext):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å AssistantAI', reply_markup=menu_btn())
    
@client_bot_router.callback_query(AssistantAICallbackdata.filter())
async def select_category(query: CallbackQuery, callback_data: AssistantAICallbackdata, state: FSMContext):
    if callback_data.action == 'select_category':
        category = json_loader("Category")[callback_data.data]
        await state.set_data({'category': category})
        await query.message.edit_text(text=f'–û—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±–µ —á—Ç–æ —Ç–æ –∏–∑ - {category}', reply_markup=under_menu_btn(callback_data.data))
    elif callback_data.action == 'select_under_category':
        if not callback_data.data:
            await query.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å AssistantAI', reply_markup=menu_btn())
            return
        data = await state.get_data()
        category = data['category']
        name = json_loader()['UnderCategories'][category][callback_data.data]
        await query.message.edit_text(text=f"–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - {name}")
        assistant.create_assistant(**json_loader()[name])
        assistant.add_thread()
        await state.set_state(AssistantAIChatStates.chat)
        
@client_bot_router.message(state=AssistantAIChatStates.chat)
async def chat_with_assistant(message: Message, state: FSMContext, bot: Bot):
    if message.text == '–û–∫–æ–Ω—á–∏—Ç—å —Å–µ–∞–Ω—Å':
        await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–∏–∞–ª–æ–≥ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è !', reply_markup=get_chatgt_main_kbrd())
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —É –≤–∞—Å –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å AssistantAI', reply_markup=menu_btn())
        return
    if message.text:
        client = await get_user(message.from_user.id)
        if client.current_ai_limit < 1:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏', reply_markup=get_chatgt_main_kbrd())
            await state.clear()
            return
        try:
            if not assistant.can_run(message.text):
                await message.answer('–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞', reply_markup=get_chatgt_main_kbrd())
                await state.clear()
                return
        except Exception as e:
            await message.answer(e)
            await state.clear()
            return
        sticker = await message.answer(text='‚è≥')
        assistant.add_message(message=message.text)
        assistant.run_programmer()
        answer = assistant.check_status_run()
        if answer:
            bot_db = await client.bot
            cp = CalculatePrice(bot_db.percent)
            stars = cp.calc_price_ai(len(message.text), len(answer))
            client.current_ai_limit -= stars.COUNT_STARS
            await client.save()
            answer += f"\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {stars.COUNT_STARS} ‚≠êÔ∏è\n–û—Å—Ç–∞—Ç–æ–∫: {client.current_ai_limit} ‚≠êÔ∏è"
            await message.answer(answer, reply_markup=back_btn())
        else:
            await message.answer("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª", reply_markup=back_btn())
        await bot.delete_message(message.from_user.id, message_id=sticker.message_id)