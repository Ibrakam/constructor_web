from aiogram.utils.i18n import gettext as _

from aiogram import Bot, flags, types
from clientbot.handlers.chatgpt.callback_data import AIAgreeCallbackData, AIBalanceCallbackData, ChatGPTCallbackData, \
    SpeechVoiceCallbackData
from aiogram.dispatcher.fsm.context import FSMContext
from clientbot.handlers.chatgpt.handlers.main import run_ai_vidio_summary
from clientbot.handlers.chatgpt.keyboards.inline_kbrds import get_kbrd_ai_balance, get_kbrd_cancel_to_ai_faq, \
    get_kbrd_faq, get_kbrd_help
from clientbot.handlers.chatgpt.keyboards.reply_kbrds import cancel_input_prompt
from clientbot.handlers.chatgpt.states import AIState
from clientbot.keyboards.reply_kb import refill_balance_methods
from clientbot.shortcuts import get_bot_by_token, get_user
from db import models
from clientbot.data.states import RefillAmount
from config import settings, scheduler
from utils.aaio.AAIO import AAIO
from loader import client_bot_router


@client_bot_router.callback_query(ChatGPTCallbackData.filter())
@flags.rate_limit(key="ChatGPTCallbackData")
async def social_network(query: types.CallbackQuery, state: FSMContext, callback_data: ChatGPTCallbackData):
    text = _("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å")
    if callback_data.model == 'gpt4':
        text = _("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT4")
    elif callback_data.model == 'gpt3':
        text = _("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT3")
    elif callback_data.model == 'dalle':
        text = _("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è DALL-E")
    elif callback_data.model == 'assistant':
        text = _("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    elif callback_data.model == 'text-to-speech':
        text = _("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∞—É–¥–∏–æ")
    elif callback_data.model == 'speech-to-text':
        text = _("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç")
    elif callback_data.model == 'youtube_transcription':
        text = _(
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∞—à–µ –≤–∏–¥–µ–æ, –∏ –Ω–∞—à –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞—É–¥–∏–æ–≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\r\n\r\n" \
            "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ URL –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –∏ –º—ã –∑–∞–π–º–µ–º—Å—è –º–∞–≥–∏–µ–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –í—Å–∫–æ—Ä–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ, –ø–æ–∑–≤–æ–ª—è—è –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –º–æ–º–µ–Ω—Ç—ã.\r\n\r\n" \
            "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ –¥–∞–π—Ç–µ –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–ª–µ–≥—á–∏—Ç—å –≤–∞—à–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π –∏ –æ—Ç–∫—Ä—ã—Ç–∏–π.")
    elif callback_data.model == 'google_search':
        text = _("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ —è —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—é")
    await query.message.delete()
    await query.message.answer(text=text, reply_markup=cancel_input_prompt())
    await state.update_data(model=callback_data.model, use_context=callback_data.use_context)
    await state.set_state(AIState.input_prompt)


@client_bot_router.callback_query(AIAgreeCallbackData.filter())
@flags.rate_limit(key="AIAgreeCallbackData")
async def social_network(query: types.CallbackQuery, state: FSMContext, callback_data: AIAgreeCallbackData):
    if callback_data.agree:
        bot = Bot.get_current()
        bot_db = await get_bot_by_token(bot.token)
        user_id = query.from_user.id
        user = await get_user(user_id)
        if user.current_ai_limit < callback_data.cost:
            await query.message.edit_text(
                _("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠êÔ∏è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞!"),
                reply_markup=await get_kbrd_ai_balance(user_id, bot_db.percent)
            )
            return
        user.current_ai_limit -= callback_data.cost
        await user.save()
        scheduler.add_job(run_ai_vidio_summary, args=(
        bot.token, user_id, callback_data.video_id, callback_data.message_id, callback_data.cost),
                          id=f"ai-{user_id}-{callback_data.video_id}", replace_existing=False, max_instances=1),
    else:
        await query.message.edit_text(_("–û—Ç–º–µ–Ω–µ–Ω–æ!"), )
        await state.clear()


@client_bot_router.callback_query(SpeechVoiceCallbackData.filter())
@flags.rate_limit(key="SpeechVoiceCallbackData")
async def social_network(query: types.CallbackQuery, state: FSMContext, callback_data: SpeechVoiceCallbackData):
    text = _("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏: ")
    await query.message.delete()
    await query.message.answer(text=text, reply_markup=cancel_input_prompt())
    await state.update_data(model="text-to-speech", voice=callback_data.voice)
    await state.set_state(AIState.input_prompt)


@client_bot_router.callback_query(AIBalanceCallbackData.filter())
@flags.rate_limit(key="AIBalanceCallbackData")
async def social_network(query: types.CallbackQuery, state: FSMContext, callback_data: AIBalanceCallbackData):
    if callback_data.action == 'balance-list':
        bot = Bot.get_current()
        bot_bd = await get_bot_by_token(bot.token)
        await query.message.edit_text(
            _("‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ üåü:"),
            reply_markup=await get_kbrd_ai_balance(query.from_user.id, bot_bd.percent)
        )
    elif callback_data.action == 'balance':
        await state.update_data(amount=callback_data.rub)
        await state.update_data(gt=callback_data.gt)
        await state.update_data(type="gpt")
        await query.message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É"), reply_markup=await refill_balance_methods(False))
        await state.set_state(RefillAmount.method)
    elif callback_data.action == 'cancel':
        await query.message.edit_text(
            _("–û—Ç–º–µ–Ω–µ–Ω–æ!"),
        )


@client_bot_router.callback_query(text='ai-faq')
@flags.rate_limit(key="ai-faq")
async def social_network(query: types.CallbackQuery):
    await query.message.edit_text(_("‚ùî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:"), reply_markup=get_kbrd_faq())


@client_bot_router.callback_query(text='ai-faq-about-bot')
@flags.rate_limit(key="ai-faq-about-bot")
async def social_network(query: types.CallbackQuery):
    await query.message.edit_text(
        _("ü§ñ –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?\n\n_‚îî –ë–æ—Ç —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã (GPT-4 Turbo), –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (DALL¬∑E 3), –æ–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (TTS), –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç (Whisper) –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ._"),
        parse_mode="Markdown", reply_markup=get_kbrd_cancel_to_ai_faq())


@client_bot_router.callback_query(text='ai-faq-about-gt')
@flags.rate_limit(key="ai-faq-about-gt")
async def social_network(query: types.CallbackQuery):
    await query.message.edit_text(
        _("‚ö°Ô∏è –ß—Ç–æ —Ç–∞–∫–æ–µ ‚≠êÔ∏è?\n\n_‚îî ‚≠êÔ∏è ‚Äî —ç—Ç–æ —Ç–æ–∫–µ–Ω –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—è–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞._"),
        parse_mode="Markdown", reply_markup=get_kbrd_cancel_to_ai_faq())


@client_bot_router.callback_query(text='ai-faq-why-donate')
@flags.rate_limit(key="ai-faq-why-donate")
async def social_network(query: types.CallbackQuery):
    await query.message.edit_text(
        _("üí≤ –ü–æ—á–µ–º—É —ç—Ç–æ –ø–ª–∞—Ç–Ω–æ?\n\n_‚îî –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ API –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ OpenAI, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã._"),
        parse_mode="Markdown", reply_markup=get_kbrd_cancel_to_ai_faq())


@client_bot_router.callback_query(text='ai-faq-how-refill-balance')
@flags.rate_limit(key="ai-faq-how-refill-balance")
async def social_network(query: types.CallbackQuery):
    text = _("üí≥ –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n\n")
    aaio = AAIO(settings.AAIO_ID, settings.AAIO_SECRET_1, settings.AAIO_SECRET_2, settings.AAIO_KEY)
    methods = aaio.get_payment_methods()
    for method in methods.list:
        text += f"‚ñ´Ô∏è {method.name}\n"
    await query.message.edit_text(text, parse_mode="Markdown", reply_markup=get_kbrd_cancel_to_ai_faq())


@client_bot_router.callback_query(text='ai-faq-back')
@flags.rate_limit(key="ai-faq-back")
async def social_network(query: types.CallbackQuery):
    await query.message.edit_text(_("‚ùî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:"), parse_mode="Markdown",
                                  reply_markup=get_kbrd_cancel_to_ai_faq())


@client_bot_router.callback_query(text='ai-help')
async def music_menu(query: types.CallbackQuery):
    bot = Bot.get_current()
    bot_db = await get_bot_by_token(bot.token)
    owner: models.MainBotUser = await bot_db.owner
    user: models.User = await owner.user
    link = f"https://t.me/{user.username}" if user.username else f"tg://user?id={user.uid}"
    await query.message.edit_text(_("‚ÑπÔ∏è –ü–æ–º–æ—â—å:"), reply_markup=get_kbrd_help(link))
